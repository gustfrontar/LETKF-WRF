#!/bin/bash
# =======================================================================
#
#       Utility Shell Finctions for WRF_LETKF
#
#                                                   2010.05.11 M.Kunii
# =======================================================================


# -----------------------------
#    date_edit
# -----------------------------
date_edit () {
(

        if [ $# -lt 7 ]; then
                echo "Usage : date_edit"
                echo "    date_edit [yyyy] [mm] [dd] [hh] [mn] [dt(min)]"
                echo "    ex) date_edit 201005051200 -180"
                exit
        fi

        yy=$1
        mm=$2
        dd=$3
        hh=$4
        mn=$5
        ss=$6
        dt=$7

        echo $yy-$mm-$dd $hh:$mn:$ss

        seconds=`date +%s -d"$yy-$mm-$dd $hh:$mn:$ss UTC"`

        seconds=`expr $seconds + $dt \* 60 `


        date -u +%Y%m%d%H%M%S -d"@$seconds "


)
}


date_edit2 () {
(

        if [ $# -lt 2 ]; then
                echo "Usage : date_edit"
                echo "    date_edit [yyyy][mm][dd][hh][mn] [dt(min)]"
                echo "    ex) date_edit 201005051200 -180"
                exit
        fi

        CDATEL=$1
        dt=$2

        cy=`echo $CDATEL | cut -c1-4`
        cm=`echo $CDATEL | cut -c5-6`
        cd=`echo $CDATEL | cut -c7-8`
        ch=`echo $CDATEL | cut -c9-10`
        cn=`echo $CDATEL | cut -c11-12`
        cs=`echo $CDATEL | cut -c13-14`

        seconds=`date +%s -d"$cy-$cm-$cd $ch:$cn:$cs UTC"`

        seconds=`expr $seconds + $dt \* 60 `


        date -u +%Y%m%d%H%M%S -d"@$seconds "


)
}

date_edit3 () {
(

        if [ $# -lt 2 ]; then
                echo "Usage : date_edit"
                echo "    date_edit [yyyy][mm][dd][hh][mn] [dt(min)]"
                echo "    ex) date_edit 201005051200 -180"
                exit
        fi

        CDATEL=$1
        dt=$2

        cy=`echo $CDATEL | cut -c1-4`
        cm=`echo $CDATEL | cut -c5-6`
        cd=`echo $CDATEL | cut -c7-8`
        ch=`echo $CDATEL | cut -c9-10`
        cn=`echo $CDATEL | cut -c11-12`
        cs=`echo $CDATEL | cut -c13-14`

        seconds=`date +%s -d"$cy-$cm-$cd $ch:$cn:$cs UTC"`

        seconds=`expr $seconds + $dt \* 60 `


        date -u +%Y\ %m\ %d\ %H\ %M\ %S -d"@$seconds "

)
}


ens_member () {

local    MEMBER="$1"
local    MEMBER_STR=$MEMBER

    if test $MEMBER -lt 100
    then
      MEMBER_STR=0$MEMBER_STR
    fi
    if test $MEMBER -lt 10
    then
      MEMBER_STR=0$MEMBER_STR
    fi

    echo $MEMBER_STR
}




met_em_file_name () {

local    DATE="$1"
local    DOMAIN="$2"
  
    cy=`echo $DATE | cut -c1-4`
    cm=`echo $DATE | cut -c5-6`
    cd=`echo $DATE | cut -c7-8`
    ch=`echo $DATE | cut -c9-10`
    cn=`echo $DATE | cut -c11-12`
    cs=`echo $DATE | cut -c13-14`

    echo met_em.d${DOMAIN}.${cy}-${cm}-${cd}_${ch}:${cn}:${cs}.nc
}

wrfout_file_name () {

local    DATE="$1"
local    DOMAIN="$2"
  
    cy=`echo $DATE | cut -c1-4`
    cm=`echo $DATE | cut -c5-6`
    cd=`echo $DATE | cut -c7-8`
    ch=`echo $DATE | cut -c9-10`
    cn=`echo $DATE | cut -c11-12`
    cs=`echo $DATE | cut -c13-14`

    echo wrfout_d${DOMAIN}_${cy}-${cm}-${cd}_${ch}:${cn}:${cs}
}


edit_namelist_input () {

local    NAMELIST=$1
local    IDATE=$2
local    EDATE=$3
local    OUTPUT_FREQ=$4                      #In minutes
local    BOUNDARY_DATA_FREQ=`expr $5 \* 60 ` #In seconds

    iy=`echo $IDATE | cut -c1-4`
    im=`echo $IDATE | cut -c5-6`
    id=`echo $IDATE | cut -c7-8`
    ih=`echo $IDATE | cut -c9-10`
    in=`echo $IDATE | cut -c11-12`
    is=`echo $IDATE | cut -c13-14`

    ey=`echo $EDATE | cut -c1-4`
    em=`echo $EDATE | cut -c5-6`
    ed=`echo $EDATE | cut -c7-8`
    eh=`echo $EDATE | cut -c9-10`
    en=`echo $EDATE | cut -c11-12`
    es=`echo $EDATE | cut -c13-14`

    sed -i 's/SYYYY/'${iy}'/g'                   $NAMELIST
    sed -i 's/SMM/'${im}'/g'                     $NAMELIST
    sed -i 's/SDD/'${id}'/g'                     $NAMELIST
    sed -i 's/SHH/'${ih}'/g'                     $NAMELIST
    sed -i 's/SMN/'${in}'/g'                     $NAMELIST
    sed -i 's/SSS/'${is}'/g'                     $NAMELIST
    sed -i 's/EYYYY/'${ey}'/g'                   $NAMELIST
    sed -i 's/EMM/'${em}'/g'                     $NAMELIST
    sed -i 's/EDD/'${ed}'/g'                     $NAMELIST
    sed -i 's/EHH/'${eh}'/g'                     $NAMELIST
    sed -i 's/EMN/'${en}'/g'                     $NAMELIST
    sed -i 's/ESS/'${es}'/g'                     $NAMELIST
    sed -i 's/OUTPUTFREQ/'${OUTPUT_FREQ}'/g'     $NAMELIST
    sed -i 's/BDYFREQ/'${BOUNDARY_DATA_FREQ}'/g' $NAMELIST

}



edit_namelist_wps () {

local    NAMELIST=$1
local    IDATE=$2
local    EDATE=$3
local    BOUNDARY_DATA_FREQ=`expr $4 \* 60 ` #In seconds

    iy=`echo $IDATE | cut -c1-4`
    im=`echo $IDATE | cut -c5-6`
    id=`echo $IDATE | cut -c7-8`
    ih=`echo $IDATE | cut -c9-10`
    in=`echo $IDATE | cut -c11-12`
    is=`echo $IDATE | cut -c13-14`

    ey=`echo $EDATE | cut -c1-4`
    em=`echo $EDATE | cut -c5-6`
    ed=`echo $EDATE | cut -c7-8`
    eh=`echo $EDATE | cut -c9-10`
    en=`echo $EDATE | cut -c11-12`
    es=`echo $EDATE | cut -c13-14`

    sed -i 's/SYYYY/'${iy}'/g'                   $NAMELIST
    sed -i 's/SMM/'${im}'/g'                     $NAMELIST
    sed -i 's/SDD/'${id}'/g'                     $NAMELIST
    sed -i 's/SHH/'${ih}'/g'                     $NAMELIST
    sed -i 's/SMN/'${in}'/g'                     $NAMELIST
    sed -i 's/SSS/'${is}'/g'                     $NAMELIST
    sed -i 's/EYYYY/'${ey}'/g'                   $NAMELIST
    sed -i 's/EMM/'${em}'/g'                     $NAMELIST
    sed -i 's/EDD/'${ed}'/g'                     $NAMELIST
    sed -i 's/EHH/'${eh}'/g'                     $NAMELIST
    sed -i 's/EMN/'${en}'/g'                     $NAMELIST
    sed -i 's/ESS/'${es}'/g'                     $NAMELIST
    sed -i 's/OUTPUTFREQ/'${OUTPUT_FREQ}'/g'     $NAMELIST
    sed -i 's/BDYFREQ/'${BOUNDARY_DATA_FREQ}'/g' $NAMELIST

}

edit_namelist_letkf () {

        NAMELIST=$1


    sed -i 's/@NBV@/'${MEMBER}'/g'                                  $NAMELIST
    sed -i 's/@NSLOTS@/'${NSLOTS}'/g'                               $NAMELIST
    sed -i 's/@NBSLOT@/'${NBSLOT}'/g'                               $NAMELIST
    sed -i 's/@SIGMA_OBS@/'${SIGMA_OBS}'/g'                         $NAMELIST
    sed -i 's/@SIGMA_OBSV@/'${SIGMA_OBSV}'/g'                       $NAMELIST
    sed -i 's/@SIGMA_OBSZ@/'${SIGMA_OBSZ}'/g'                       $NAMELIST
    sed -i 's/@SIGMA_OBST@/'${SIGMA_OBST}'/g'                       $NAMELIST
    sed -i 's/@GROSS_ERROR@/'${GROSS_ERROR}'/g'                     $NAMELIST
    sed -i 's/@COV_INFL_MUL@/'${COV_INFL_MUL}'/g'                   $NAMELIST
    sed -i 's/@SP_INFL_ADD@/'${SP_INFL_ADD}'/g'                     $NAMELIST
    sed -i 's/@RELAX_ALPHA_SPREAD@/'${RELAX_ALPHA_SPREAD}'/g'       $NAMELIST
    sed -i 's/@RELAX_ALPHA@/'${RELAX_ALPHA}'/g'                     $NAMELIST



}


edit_namelist_arwpost () {

NAMELIST=$1
local IDATE=$2
local EDATE=$3
local LOCALOUTPUTFREQ=$4 #In seconds


LOCALDATE=$IDATE
while [ $LOCALDATE -le $EDATE ] ; do

    ARWEDATE=$LOCALDATE
    LOCALDATE=` date_edit2 $LOCALDATE $LOCALOUTPUTFREQ `

done

LOCALOUTPUTFREQ=`expr $LOCALOUTPUTFREQ \* 60 `

    iy=`echo $IDATE | cut -c1-4`
    im=`echo $IDATE | cut -c5-6`
    id=`echo $IDATE | cut -c7-8`
    ih=`echo $IDATE | cut -c9-10`
    in=`echo $IDATE | cut -c11-12`
    is=`echo $IDATE | cut -c13-14`

    ey=`echo $ARWEDATE | cut -c1-4`
    em=`echo $ARWEDATE | cut -c5-6`
    ed=`echo $ARWEDATE | cut -c7-8`
    eh=`echo $ARWEDATE | cut -c9-10`
    en=`echo $ARWEDATE | cut -c11-12`
    es=`echo $ARWEDATE | cut -c13-14`

    sed -i 's/SYYYY/'${iy}'/g'                   $NAMELIST
    sed -i 's/SMM/'${im}'/g'                     $NAMELIST
    sed -i 's/SDD/'${id}'/g'                     $NAMELIST
    sed -i 's/SHH/'${ih}'/g'                     $NAMELIST
    sed -i 's/SMN/'${in}'/g'                     $NAMELIST
    sed -i 's/SSS/'${is}'/g'                     $NAMELIST
    sed -i 's/EYYYY/'${ey}'/g'                   $NAMELIST
    sed -i 's/EMM/'${em}'/g'                     $NAMELIST
    sed -i 's/EDD/'${ed}'/g'                     $NAMELIST
    sed -i 's/EHH/'${eh}'/g'                     $NAMELIST
    sed -i 's/EMN/'${en}'/g'                     $NAMELIST
    sed -i 's/ESS/'${es}'/g'                     $NAMELIST
    sed -i 's/OUTPUTFREQ/'${LOCALOUTPUTFREQ}'/g'      $NAMELIST
    sed -i 's/INPUT_ROOT_NAME/'${INPUT_ROOT_NAME}'/g'      $NAMELIST
    sed -i 's/OUTPUT_ROOT_NAME/'${OUTPUT_ROOT_NAME}'/g'    $NAMELIST    
    sed -i 's/OUTPUTVARS/'${OUTVARS}'/g'    $NAMELIST  
    sed -i 's/OUTPUTLEVS/'${OUTLEVS}'/g'    $NAMELIST 
    sed -i 's/INTERP_METHOD/'${INTERP_METHOD}'/g'    $NAMELIST 
    
}

edit_wrf_wrf () {

local SCRIPT=$1
echo "#!/bin/bash                                         "   > $SCRIPT
echo "set -x                                                "  >> $SCRIPT
echo "WORKDIR=\$1                                           "  >> $SCRIPT
echo "                                                      "  >> $SCRIPT
echo "cd \$WORKDIR                                          "  >> $SCRIPT
if [ $SYSTEM -eq 1 ] ; then 
echo "ulimit -s unlimited                                   "  >> $SCRIPT
fi                     
echo "ln -sf ../WRF/* ./                                    "  >> $SCRIPT
echo "                                                      "  >> $SCRIPT
echo "cp ../WRF/namelist.input.wrf ./namelist.input         "  >> $SCRIPT
echo "echo \"LIST IN DIRECTORY PRIOR TO RUN WRF\"           "  >> $SCRIPT
echo "ls -l                                                 "  >> $SCRIPT
echo "./wrf.exe                                             "  >> $SCRIPT

chmod 766 $SCRIPT

}


edit_wrf_real () {

local SCRIPT=$1
echo "#!/bin/bash                                         "   > $SCRIPT
echo "set -x                                                "  >> $SCRIPT
echo "WORKDIR=\$1                                           "  >> $SCRIPT
echo "                                                      "  >> $SCRIPT
echo "cd \$WORKDIR                                          "  >> $SCRIPT
if [ $SYSTEM -eq 1 ] ; then 
echo "ulimit -s unlimited                                   "  >> $SCRIPT
fi                     
echo "ln -sf ../WRF/* ./                                    "  >> $SCRIPT
echo "                                                      "  >> $SCRIPT
echo "cp ../WRF/namelist.input.real ./namelist.input        "  >> $SCRIPT
echo "echo \"LIST IN DIRECTORY PRIOR TO RUN REAL\"          "  >> $SCRIPT
echo "ls -l                                                 "  >> $SCRIPT
echo "./real.exe                                            "  >> $SCRIPT

chmod 766 $SCRIPT

}


edit_wrf_pre () {

local SCRIPT=$1
echo "#!/bin/bash                                                         "  > $SCRIPT
echo "set -x                                                              " >> $SCRIPT
echo "WORKDIR=\$1                                                         " >> $SCRIPT
echo "MEM=\$2                                                             " >> $SCRIPT
echo "echo \$WORKDIR                                                      " >> $SCRIPT
echo "cd \$WORKDIR                                                        " >> $SCRIPT
if [ $SYSTEM -eq 0 ] ; then
echo "../WRF/dummy-mpi                                                    " >> $SCRIPT
fi
#MERGE AND UPDATE LATERAL AND LOW BOUNDARY CONDITIONS           
echo "mv wrfinput_d01 wrfinput_d01.gfs                                    " >> $SCRIPT
echo "mv anal wrfinput_d01                                                " >> $SCRIPT
echo "echo \"&control_param                          \" > parame.in      " >> $SCRIPT
echo "echo \"da_file='./wrfinput_d01'                 \" >> parame.in     " >> $SCRIPT
echo "echo \"wrf_bdy_file='./wrfbdy_d01'              \" >> parame.in     " >> $SCRIPT
echo "echo \"debug=.true.                             \" >> parame.in     " >> $SCRIPT
echo "echo \"update_lateral_bdy=.true.                \" >> parame.in     " >> $SCRIPT
echo "echo \"update_low_bdy=.false.                   \" >> parame.in     " >> $SCRIPT
echo "echo \"iswater=16                               \" >> parame.in     " >> $SCRIPT
echo "echo \"/                                       \" >> parame.in     " >> $SCRIPT
echo "./da_update_bc.exe > log.da_update_lat\${MEM}                       " >> $SCRIPT
echo "echo \"&control_param                          \" > parame.in      " >> $SCRIPT
echo "echo \"da_file='./wrfinput_d01'                 \" >> parame.in     " >> $SCRIPT
echo "echo \"wrf_input='./wrfinput_d01.gfs'           \" >> parame.in     " >> $SCRIPT
echo "echo \"debug=.true.                             \" >> parame.in     " >> $SCRIPT
echo "echo \"update_lateral_bdy=.false.               \" >> parame.in     " >> $SCRIPT
echo "echo \"update_low_bdy=.true.                    \" >> parame.in     " >> $SCRIPT
echo "echo \"update_lsm=.true.                        \" >> parame.in     " >> $SCRIPT
echo "echo \"iswater=16                               \" >> parame.in     " >> $SCRIPT
echo "echo \"/                                       \" >> parame.in     " >> $SCRIPT
echo "                                                                    " >> $SCRIPT
echo "./da_update_bc.exe > log.da_update_low\${MEM}                       " >> $SCRIPT

chmod 766 $SCRIPT

}


edit_wrf_post () {

SCRIPT=$1

echo "#!/bin/bash                                                  " > $SCRIPT 

echo "WORKDIR=\$1                                                  " >> $SCRIPT
echo "MEM=\$2                                                      " >> $SCRIPT

echo "cd \$WORKDIR                                                 " >> $SCRIPT

#Insert DUMMY MPI CALL
if [ $SYSTEM -eq 0 ] ; then
echo "../WRF/dummy-mpi                                             " >> $SCRIPT
fi

if [ $SYSTEM -eq 1 ]; then
echo "ulimit -s unlimited                                          " >> $SCRIPT
fi

echo "cat ./rsl.error.* > ./wrflog.\${MEM}                         " >> $SCRIPT


# --- RENAME OUTPUT
CDATEL=$WSDATE

LOCAL_OUTFREC=$WINDOW_FREC

it=1

while [ ${CDATEL} -le ${WEDATE} ] ; do

itm=$it
if [ ${it} -lt 10 ]
then
itm="0${itm}"
fi


local_file=` wrfout_file_name $CDATEL $DOMAIN`
if [ $it -eq $NBSLOT ] ; then
   
echo "cp $local_file ../LETKF/gues\${MEM}                          " >> $SCRIPT
fi

echo "mv $local_file ../LETKF/gs${itm}\${MEM}                      " >> $SCRIPT

CDATEL=`date_edit2 $CDATEL $LOCAL_OUTFREC `
it=`expr ${it} + 1`
done

echo "if [  \$MEM -eq $MM ] ; then " >> $SCRIPT
echo "cp ../LETKF/gs${NBSLOT}\${MEM} ../LETKF/anal_me             " >> $SCRIPT
echo "fi" >> $SCRIPT

echo "if [  \$MEM -eq $MM ] ; then " >> $SCRIPT
echo "cp ../LETKF/gs${NBSLOT}\${MEM} ../LETKF/gues_me             " >> $SCRIPT
echo "fi" >> $SCRIPT

chmod 766 $SCRIPT

}


safe_rm_tmpdir () {
#-------------------------------------------------------------------------------
# Safely remove a temporary directory
#
# Usage: safe_rm_tmpdir DIRNAME
#
#   DIRNAME  The temporary directory
#-------------------------------------------------------------------------------

local DIRNAME="$1"

#-------------------------------------------------------------------------------

if [ -z "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '\$DIRNAME' is not set." >&2
  exit 1
fi
if [ ! -e "$DIRNAME" ]; then
  return 0
fi
if [ ! -d "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not a directory." >&2
  exit 1
fi
if [ ! -O "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not owned by you." >&2
  exit 1
fi

rm -fr $DIRNAME
res=$? && ((res != 0)) && exit $res

#-------------------------------------------------------------------------------
}


safe_init_tmpdir () {
#-------------------------------------------------------------------------------
# Safely initialize a temporary directory
#
# Usage: safe_init_tmpdir DIRNAME
#
#   DIRNAME  The temporary directory
#-------------------------------------------------------------------------------

local DIRNAME="$1"

#-------------------------------------------------------------------------------

if [ -z "$DIRNAME" ]; then
  echo "[Warning] $FUNCNAME: '\$DIRNAME' is not set." 
  exit 1
fi

mkdir -p $DIRNAME
res=$? && ((res != 0)) && exit $res

if [ ! -d "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not a directory." 
  exit 1
fi
if [ ! -O "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not owned by you." 
  exit 1
fi

rm -fr $DIRNAME/*
res=$? && ((res != 0)) && exit $res

mkdir -p $DIRNAME/LETKF
mkdir -p $DIRNAME/SCRIPTS
if [ $SYSTEM -eq 0 ] ; then
mkdir -p $DIRNAME/SPAWN
fi
mkdir -p $DIRNAME/WRF
mkdir -p $DIRNAME/add_pert
mkdir -p $DIRNAME/OBS


#-------------------------------------------------------------------------------
}


safe_init_outputdir () {
#-------------------------------------------------------------------------------
# Safely initialize a temporary directory
#
# Usage: safe_init_tmpdir DIRNAME
#
#   DIRNAME  The temporary directory
#-------------------------------------------------------------------------------

local DIRNAME="$1"

#-------------------------------------------------------------------------------

if [ -z "$DIRNAME" ]; then
  echo "[Warning] $FUNCNAME: '\$DIRNAME' is not set." 
  exit 1
fi
if [ -e "$DIRNAME" -a $RESTART -eq 0 ]; then
   echo "[Error] $DIRNAME exists: Please remove it manually to avoid data loss"
   exit 1
fi

mkdir -p $DIRNAME
res=$? && ((res != 0)) && exit $res

if [ ! -d "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not a directory." 
  exit 1
fi
if [ ! -O "$DIRNAME" ]; then
  echo "[Error] $FUNCNAME: '$DIRNAME' is not owned by you." 
  exit 1
fi

#rm -fr $DIRNAME/*
#res=$? && ((res != 0)) && exit $res

# SET OUTPUT DIRECTORY
if [ $RESTART -eq 0  ]
then
 echo "This is a new experiment -> Building output directory from scracth"

 mkdir -p $DIRNAME/gues
 mkdir -p $DIRNAME/anal

else

 if [ ! -e $DIRNAME/gues/ -o ! -e $DIRNAME/anal/ ] ; then
  echo "[Error] This is a restart run but OUTPUTDIR=$DIRNAME does not exist "
  exit 1
 fi
 echo "[Warning] This is a restart experiment -> Using the previous output directory (data can be partially overwritten) "

fi

   
#-------------------------------------------------------------------------------
}

generate_vcode () {
#Generate vcode files.

local TMPDIRL="$1"               #Temporary directory

NODE=0
JOB=1

while [ $JOB -le $MM -a $JOB -le $MAX_BACKGROUND_JOBS ] ; do

 MNODE=1
  vcoord_file=$TMPDIRL/vcoord_${JOB}
  rm -fr $vcoord_file
  while [ $MNODE -le $NODES_PER_MEMBER ]; do
   echo "( $NODE ) " >> $vcoord_file
   MNODE=`expr $MNODE + 1 `
   NODE=`expr $NODE + 1 `
  done
  JOB=`expr $JOB + 1 `

done

}

copy_data () {

#COPY LETKF

cp $LETKF $TMPDIR/LETKF/letkf.exe
cp $NAMELISTLETKF $TMPDIR/LETKF/letkf.namelist.template

#COPY WRF
cp $WRFMODEL/run/*         $TMPDIR/WRF/
rm -f $TMPDIR/WRF/*.exe $TMPDIR/WRF/namelist.input
cp $WRFMODEL/main/wrf.exe  $TMPDIR/WRF/
cp $WRFMODEL/main/real.exe $TMPDIR/WRF/
cp $ARWPOST/ARWpost.exe    $TMPDIR/WRF/
cp -r $ARWPOST/src         $TMPDIR/WRF/
cp $UPDATEBC               $TMPDIR/WRF/da_update_bc.exe
cp $NAMELISTWRF ./namelist.input.template

if [ $SYSTEM -eq 0 ];then
#COPY SPAWN
cp $SPAWN/dummy-mpi $TMPDIR/SPAWN
cp $SPAWN/spawn     $TMPDIR/SPAWN
fi

#COPY AND COMPILE PERTURBATION COMPUTATION CODE
cp $WRF/add_pert/*  $TMPDIR/add_pert
ssh $PPSSERVER " cd $TMPDIR/add_pert && ./make_compute_pert_metem.sh >  $TMPDIR/add_pert/compile.log "

#COPY BASH SCRIPTS
cp $UTIL        $TMPDIR/SCRIPTS/util.sh
chmod 766 $TMPDIR/SCRIPTS/*.sh

}


set_cycle_dates () {

#DEFINE IMORTANT DATES FOR THE CURRENT CYCLE (YYYYMMDDHHNNSS)
FDATE=`date_edit2 $CDATE $GUESFT `           #Forecast end date
ADATE=`date_edit2 $CDATE $WINDOW `           #Analysis date for the current cycle
WSDATE=`date_edit2 $CDATE $WINDOW_START `    #Assimilation window start date
WEDATE=`date_edit2 $CDATE $WINDOW_END   `    #Assimilation window end   date
BDYDATE=`date_edit2 $CDATE $DINC   `         #Dummy date for boundary data preparation.


echo ">>> IMPORTANT DATES DEFINED IN THIS CYCLE"

echo "FDATE=   $FDATE "
echo "ADATE=   $ADATE "
echo "WSDATE=  $WSDATE"
echo "WEDATE=  $WEDATE"
echo "BDYDATE= $BDYDATE"

}

generate_run_cycle_script_k_background () {
#CREATE THE SCRIPT TO BE SUBMITED TO K COMPUTER

      local_script=$1

      #Prepare the script for bulk job.
      echo "#!/bin/bash    "                                     > $local_script
      echo "#PJM --rsc-list \"node=${TOTAL_NODES}\"              ">> $local_script
      echo "#PJM --rsc-list \"elapse=${ELAPSE}\"                 ">> $local_script
      echo "#PJM --mpi \"proc=${TOTAL_NODES}           \"        ">> $local_script
      echo "#PJM --mpi \"shape=${TOTAL_NODES}       \"           ">> $local_script
      echo "#PJM --mpi assign-online-node                        ">> $local_script
      echo "#PJM --stg-transfiles all                            ">> $local_script
      echo "#PJM -S                                              ">> $local_script
      #PROGRAMS AND SCRIPTS
      echo "#PJM --stgin \"$RUNTIMELIBS/*            ./lib/      \" ">> $local_script
      echo "#PJM --stgin \"${TMPDIR}/LETKF/*         ./LETKF/    \" ">> $local_script
      echo "#PJM --stgin \"${TMPDIR}/OBS/*           ./LETKF/    \" ">> $local_script
      echo "#PJM --stgin \"${TMPDIR}/SCRIPTS/*       ./SCRIPTS/  \" ">> $local_script
      #Generate staging list.
      #UPLOAD SCRIPTS
      M=1
      while [ $M -le $MEMBER ] ; do
       MEM=`ens_member $M`
       echo "#PJM --stgin \"$TMPDIR/ENSINPUT/${MEM}/*  ./WRF$MEM/ \"   ">> $local_script
       M=`expr $M + 1 `
      done
      #UPLOAD ANALYSIS FILES (ONLY IF ITERATION IS GREATHER THAN ONE)
      if [ $ITER -gt 1 ] ; then
       M=1
       while [ $M -le $MEMBER ] ; do
        MEM=`ens_member $M`
        echo "#PJM --stgin \"$OUTPUTDIR/anal/${CDATE}/anal$MEM  ./WRF$MEM/anal \" ">> $local_script
        M=`expr $M + 1 `
       done
       if [ $RUNMEAN -eq 1 ] ; then
        MEM=`ens_member $MM`
        echo "#PJM --stgin \"$OUTPUTDIR/anal/${CDATE}/anal_me.nc  ./WRF$MEM/anal \" ">> $local_script
       fi
      fi
     #COPY WRF MODEL AND DUMMY_MPI
      echo "#PJM --stgin \"${TMPDIR}/WRF/*                ./WRF/ \" ">> $local_script
      echo "#PJM --stgin \"${TMPDIR}/SPAWN/dummy-mpi      ./WRF/ \" ">> $local_script
     #STAGEOUT FORECASTS
      M=1
      while [ $M -le $MEMBER ] ; do
        MEM=`ens_member $M`
       echo "#PJM --stgout   \"./LETKF/gs${NBSLOT}${MEM}   ${RESULTDIRA}/anal${MEM} \" ">> $local_script
       echo "#PJM --stgout   \"./LETKF/gues${MEM}          ${RESULTDIRG}/gues${MEM} \" ">> $local_script
       echo "#PJM --stgout   \"./WRF$MEM/wrflog.*               ${RESULTDIRG}/ \" ">> $local_script
       echo "#PJM --stgout   \"./WRF$MEM/log.*                  ${RESULTDIRG}/ \" ">> $local_script
       M=`expr $M + 1 `
      done
      echo "#PJM --stgout   \"./LETKF/anal_me          ${RESULTDIRA}/anal_me   \" ">> $local_script
      if [ $RUNMEAN -eq 1 ]; then
        echo "#PJM --stgout   \"./LETKF/gues${MM}      ${RESULTDIRG}/gues_me   \" ">> $local_script
      fi
  
       echo "#PJM --stgout   \"./LETKF/NOUT*                     ${RESULTDIRA}/ \"     ">> $local_script
       echo "#PJM --stgout   \"./LETKF/*                         ${TMPDIR}/CURRENT_LETKF/ \"     ">> $local_script
       
      echo "BASEDIR=\`pwd\`                           ">> $local_script
      echo ". /work/system/Env_base                   ">> $local_script
      echo "if [ -d "./lib" ] ; then                  ">> $local_script
      echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\${BASEDIR}/lib:/opt/local/globus/lib:/opt/FJSVpxtof/sparc64fx/lib64:/opt/FJSVtclang/GM-1.2.0-15/lib64">> $local_script
      echo "fi                                      ">> $local_script

     
     #SCRIPT
     echo "export PARALLEL=${PROC_PER_NODE} " >> $local_script
     echo "export OMP_NUM_THREADS=${PROC_PER_NODE} " >> $local_script
  
     M=1
     while [  $M -le $MM ];do
      JOB=1
      while [  $JOB -le $MAX_BACKGROUND_JOBS -a $JOB -le $MM ];do
      MEM=`ens_member $M `
         echo "mpiexec -np ${NODES_PER_MEMBER} --vcoordfile ./WRF/vcoord_${JOB} ./SCRIPTS/WRF_REAL.sh \${BASEDIR}/WRF${MEM}/ &  " >> $local_script
         JOB=`expr $JOB + 1 `
         M=`expr $M + 1 `
      done
      echo "time wait " >> $local_script
     done

  
     if [ $ITER -gt 1 ];then
     M=1
     while [  $M -le $MM ];do
      JOB=1
      while [  $JOB -le $MAX_BACKGROUND_JOBS -a $JOB -le $MM ];do
      MEM=`ens_member $M `
         echo "mpiexec -np 1 --vcoordfile ./WRF/vcoord_${JOB} ./SCRIPTS/WRF_PRE.sh \${BASEDIR}/WRF${MEM} ${MEM} &  " >> $local_script
         JOB=`expr $JOB + 1 `
         M=`expr $M + 1 `
      done
      echo "time wait " >> $local_script
     done      
     fi
        
    
     M=1
     while [  $M -le $MM ];do
      JOB=1
      while [  $JOB -le $MAX_BACKGROUND_JOBS -a $JOB -le $MM ];do
      MEM=`ens_member $M `
         echo "mpiexec -np ${NODES_PER_MEMBER} --vcoordfile ./WRF/vcoord_${JOB} ./SCRIPTS/WRF_WRF.sh \${BASEDIR}/WRF${MEM} &  " >> $local_script
         JOB=`expr $JOB + 1 `
         M=`expr $M + 1 `
      done
      echo "time wait " >> $local_script
     done 
   
     echo "export PARALLEL=1 " >> $local_script
     echo "export OMP_NUM_THREADS=1 " >> $local_script

     M=1
     while [  $M -le $MM ];do
      JOB=1
      while [  $JOB -le $MAX_BACKGROUND_JOBS -a $JOB -le $MM ];do
      MEM=`ens_member $M `

         echo "mpiexec -np 1 --vcoordfile ./WRF/vcoord_${JOB} ./SCRIPTS/WRF_POST.sh \${BASEDIR}/WRF${MEM} $MEM &  " >> $local_script
         JOB=`expr $JOB + 1 `
         M=`expr $M + 1 `
      done
      echo "time wait " >> $local_script
     done 


     echo "cd ./LETKF/                                                  " >> $local_script
     echo "mpiexec -np ${TOTAL_NODES} --of-proc std-file ./letkf.exe " >> $local_script
     echo "echo \"CICLE NORMAL END \" " >> $local_script    


}

get_conventional_observations () {

ADATES=`echo $ADATE | cut -c1-10`  #Short version of analysis date (YYYYMMDDHH)

  if [ -e $OBSDIR/obs$ADATES/t-3.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t-3.dat $TMPDIR/OBS/obs01.dat
  else
   touch $TMPDIR/OBS/obs01.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t-2.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t-2.dat $TMPDIR/OBS/obs02.dat
  else
   touch $TMPDIR/OBS/obs02.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t-1.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t-1.dat $TMPDIR/OBS/obs03.dat
  else
   touch $TMPDIR/OBS/obs03.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t.dat $TMPDIR/OBS/obs04.dat
  else
   touch $TMPDIR/OBS/obs04.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t+1.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t+1.dat $TMPDIR/OBS/obs05.dat
  else
   touch $TMPDIR/OBS/obs05.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t+2.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t+2.dat $TMPDIR/OBS/obs06.dat
  else
   touch $TMPDIR/OBS/obs06.dat
  fi
  if [ -e $OBSDIR/obs$ADATES/t+3.dat  ] ; then
   cp $OBSDIR/obs$ADATES/t+3.dat $TMPDIR/OBS/obs07.dat
  else
   touch $TMPDIR/OBS/obs07.dat
  fi

#   cp $OBSDIR/obs$ADATES/t-3.dat $TMPDIR/OBS/obs03.dat                                   
#   cp $OBSDIR/obs$ADATES/t-2.dat $TMPDIR/OBS/obs02.dat                         
#   cp $OBSDIR/obs$ADATES/t-1.dat $TMPDIR/OBS/obs03.dat  
#   cp $OBSDIR/obs$ADATES/t.dat   $TMPDIR/OBS/obs04.dat  
#   cp $OBSDIR/obs$ADATES/t+1.dat $TMPDIR/OBS/obs05.dat  
#   cp $OBSDIR/obs$ADATES/t+2.dat $TMPDIR/OBS/obs06.dat 
#   cp $OBSDIR/obs$ADATES/t+3.dat $TMPDIR/OBS/obs07.dat 

}

generate_perturb_met_em_script () {

local local_script=$1

echo "#!/bin/bash                                                             "  > $local_script            
#echo "set -x                                                                    " >> $local_script
#This script perturbs met_em files.
#To avoid perturbing again the same met_em file for the same ensemble member
#First the script checks wether the perturbed met_em file exists and if it do not
#exist the script creates the file.

echo "INIDATE=\$1                   #INITIAL DATE                               " >> $local_script
echo "ENDDATE=\$2                   #END DATE                                   " >> $local_script
echo "BOUNDARY_DATA_FREQ=\$3        #Boundary data frequency (hours)            " >> $local_script
echo "WORKDIR=\$4                   #Temporary work directory                   " >> $local_script
echo "PERTMETEMDIR=\$5              #Met em data base for perturbations         " >> $local_script
echo "PERTDATEDIR=\$6               #Dates database for perturbations           " >> $local_script
echo "METEMDIR=\$7                  #Met em for curren experiment dates         " >> $local_script
echo "MEM=\$8                       #Ensemble member                            " >> $local_script
echo "EXEC=\$9                      #Executable for perturbation computation.   " >> $local_script
echo "SCALE_FACTOR=\${10}           #Scale factor of perturbation amplitude.    " >> $local_script

echo "source $TMPDIR/SCRIPTS/util.sh                                            " >> $local_script
echo "ulimit -s unlimited                                                       " >> $local_script

echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH_ADD:\$LD_LIBRARY_PATH             " >> $local_script
echo "export PATH=$LD_PATH_ADD:$PATH                                            " >> $local_script

#################################################
#   INPUT CHECK
#################################################

echo "echo " INIDATE    =  \$INIDATE "                                          " >> $local_script
echo "echo " ENDDATE     =  \$ENDDATE  "                                        " >> $local_script
echo "echo " BOUNDARY_DATA_FREQ = \$BOUNDARY_DATA_FREQ "                        " >> $local_script
echo "echo " WORKDIR     =  \$WORKDIR "                                         " >> $local_script
echo "echo " PERTMETEMDIR =  \$PERTMETEMDIR "                                   " >> $local_script
echo "echo " PERTDATEDIR  =  \$PERTDATEDIR  "                                   " >> $local_script
echo "echo " METEMDIR     =  \$METEMDIR     "                                   " >> $local_script
echo "echo " MEM          =  \$MEM          "                                   " >> $local_script
echo "echo " EXEC         =  \$EXEC         "                                   " >> $local_script
echo "echo " SCALE FACTOR =  \$SCALE_FACTOR "                                   " >> $local_script

#################################################
#   REMOVE DATA FROM PREVIOUS CYCLE
#################################################
echo "mkdir -p \$WORKDIR                                                       " >> $local_script
echo "cd \$WORKDIR                                                             " >> $local_script

echo "CDATE=\`date_edit2 \$INIDATE -\$BOUNDARY_DATA_FREQ \`                    " >> $local_script
 
echo "CFILE=\`met_em_file_name \$CDATE 01 \`                                   " >> $local_script

echo "if [ -e \$CFILE ] ; then                                                 " >> $local_script
echo "rm -fr \$CFILE                                                           " >> $local_script
echo "fi                                                                       " >> $local_script

#################################################
#   CYCLE TO CREATE THE PERTURBATIONS
#################################################

echo "CDATE=\$INIDATE                                                          " >> $local_script

echo "while [  \$CDATE -le \$ENDDATE ] ; do                                    " >> $local_script

#Get file name
echo "CFILE=\`met_em_file_name \$CDATE 01\`                                    " >> $local_script

echo "if [ ! -e \$CFILE ] ; then                                               " >> $local_script
#File is not present we have to create it!
   #Get the dates that we will use to create the perturbation
echo "   read CDATE1 CDATE2 < \$PERTDATEDIR/\${CDATE}_\$MEM.dates              " >> $local_script
echo "   FILE1=\`met_em_file_name \$CDATE1 01 \`                               " >> $local_script
echo "   FILE2=\`met_em_file_name \$CDATE2 01 \`                               " >> $local_script

   #These will be accesed read only.
echo "   ln -sf \$PERTMETEMDIR/\$FILE1 ./input_file1.nc                        " >> $local_script
echo "   ln -sf \$PERTMETEMDIR/\$FILE2 ./input_file2.nc                        " >> $local_script

   #Copy the unperturbed met_em file (this one will be modified).
echo "   cp \$METEMDIR/\$CFILE .                                                " >> $local_script
echo "   ln -sf ./\$CFILE ./ctrl_met_em.nc                                     " >> $local_script
echo "   chmod 766 ./ctrl_met_em.nc                                            " >> $local_script
   
   #Run the program 
   # ctrl_met_em.nc = ctrl_met_em.nc + scale_factor * ( input_file1.nc - input_file2.nc )
echo "   \$EXEC \$SCALE_FACTOR > compute_pert.log                              " >> $local_script

echo "fi                                                                       " >> $local_script

echo "CDATE=\`date_edit2 \$CDATE \$BOUNDARY_DATA_FREQ \`                       " >> $local_script

echo "done                                                                     " >> $local_script

#We are done!

chmod 766 $local_script

}

perturb_met_em () {

local SCRIPT=$1

EXEC=$TMPDIR/add_pert/compute_pert_metem.exe
M=1
while [ $M -le $MEMBER ] ; do
  
  RUNNING=0
  while [ $RUNNING -le $MAX_RUNNING -a $M -le $MEMBER ] ; do
    MEM=`ens_member $M`
    #Do not perturb the ensemble mean run.
    if [ $RUNMEAN -eq 1 -a $M -eq $MM ] ; then
       TMP_SCALE_FACTOR="0.0"
    else
       TMP_SCALE_FACTOR=$SCALE_FACTOR
    fi
    ssh $PPSSERVER " $SCRIPT $CDATE $BDYDATE $BOUNDARY_DATA_FREC $TMPDIR/ENSINPUT/$MEM/ $PERTMETEMDIR $PERTDATEDIR $METEMDIR $MEM $EXEC $TMP_SCALE_FACTOR > $TMPDIR/SCRIPTS/perturb_met_em${MEM}.log " &
    RUNNING=`expr $RUNNING + 1 `
    M=`expr $M + 1 `
  done
  time wait
done

}


arw_postproc () {

#This script perturbs met_em files.
#To avoid perturbing again the same met_em file for the same ensemble member
#First the script checks wether the perturbed met_em file exists and if it do not
#exist the script creates the file.

local CDATE=$1                   #INITIAL DATE
local WORKDIR=$TMPDIR/ENSINPUT/        #Temporary work directory
local ANALDIR=$OUTPUTDIR/anal/$CDATE/
local GUESDIR=$OUTPUTDIR/gues/$CDATE/
                                         
#################################################
#   INPUT CHECK
#################################################
echo " VARIABLES IN POST PROCESIN FUNCTION "
echo " CDATE        =  $CDATE           "
echo " WORKDIR      =  $WORKDIR         "
echo " MEMBER       =  $MEMBER          "
echo " NAMELIST ARW =  $NAMELISTARWPOST "
echo " ANALDIR      =  $ANALDIR         "
echo " GUESDIR      =  $GUESDIR         "
echo " OUTVARS      =  $OUTVARS         "
echo " OUTLEVS      =  $OUTLEVS         "
echo " INTERP_METHOD=  $INTERP_METHOD   "
echo " ARWPOST      =  $ARWPOST         "
echo " MAX_RUNNING  =  $MAX_RUNNING     "

#################################################
#   CYCLE TO CREATE THE PERTURBATIONS
#################################################
ARWPOST_FREC="3600"

INPUT_ROOT_NAME=tmpin
OUTPUT_ROOT_NAME=tmpout
cp $NAMELISTARWPOST $WORKDIR/namelist.ARWpost
edit_namelist_arwpost $WORKDIR/namelist.ARWpost $CDATE $CDATE $ARWPOST_FREC

echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH_ADD:\$LD_LIBRARY_PATH " >  ${WORKDIR}/tmp.sh
echo "export PATH=$LD_PATH_ADD:$PATH                                " >> ${WORKDIR}/tmp.sh
if [ $SYSTEM -eq  1 ] ; then
   echo " ulimit -s unlimited                                       " >> ${WORKDIR}/tmp.sh
fi
echo "cd \$1                                                        " >> ${WORKDIR}/tmp.sh
echo "MEM=\$2                                                       " >> ${WORKDIR}/tmp.sh
echo "DATADIR=\$3                                                   " >> ${WORKDIR}/tmp.sh
echo "PREFIX=\$4                                                    " >> ${WORKDIR}/tmp.sh
echo "ln -sf \${DATADIR}/\${PREFIX}\${MEM} ./tmpin                  " >> ${WORKDIR}/tmp.sh
echo "ln -sf \${DATADIR}/plev\${MEM}.dat ./tmpout.dat               " >> ${WORKDIR}/tmp.sh
echo "ln -sf \${DATADIR}/plev\${MEM}.ctl ./tmpout.ctl               " >> ${WORKDIR}/tmp.sh
echo "ln -sf $ARWPOST/src .                                         " >> ${WORKDIR}/tmp.sh
echo "ln -sf $WORKDIR/namelist.ARWpost ./namelist.ARWpost           " >> ${WORKDIR}/tmp.sh
echo "$ARWPOST/ARWpost.exe > \${DATADIR}/arwpost\${MEM}.log         " >> ${WORKDIR}/tmp.sh
echo "sed -i 's/tmpout/plev'\${MEM}'/g' \${DATADIR}/plev\${MEM}.ctl " >> ${WORKDIR}/tmp.sh
chmod 766 ${WORKDIR}/tmp.sh

M=1
while [ $M -le $MEMBER ] ; do
  RUNNING=0
  while [ $RUNNING -le $MAX_RUNNING -a $M -le $MEMBER ] ; do
    MEM=`ens_member $M`
    TMPDIRL=$WORKDIR/${MEM}
    
    ssh $PPSSERVER " ${WORKDIR}/tmp.sh $TMPDIRL $MEM $ANALDIR anal && ${WORKDIR}/tmp.sh $TMPDIRL $MEM $GUESDIR gues " & 
     
    RUNNING=`expr $RUNNING + 1 `
    M=`expr $M + 1 `
  done
  time wait
done

}


# ------------------------------------
#   FUNCTION : pjsub_end_check
# ------------------------------------
pjsub_end_check() {
input_shell=$1
n=$2
if [ $# -eq 1 ]; then
        n=$RANDOM
fi

        request_log=$1
        id=`pjsub -z jid ${input_shell}`
        echo "${input_shell} SUMBITTED, ID= $id"

#        len=`echo ${#id}`
#        lenm=`expr ${len} - 1`
#        id=`echo ${id} | cut -c2-${lenm}`

        echo "WAITING FOR THE JOB..."
        qsub_end=0
        while [ ${qsub_end} -eq 0 ]
        do
                pjstat > qstat.log${n}
                grep ${id} qstat.log${n} > grep.log${n}

                if [ ! -s grep.log${n} ]; then
                        qsub_end=1
                        echo "JOB FINISHED"
                else
                        sleep 30
                fi
        done

        rm -f qstat.log${n} grep.log${n}
}




