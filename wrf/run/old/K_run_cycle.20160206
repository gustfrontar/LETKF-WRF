#!/bin/bash
#=======================================================================
# K_driver.sh
#   To run the WRF-LETKF in the K computer.
#   This scripts prepares all the data needed to run the letkf cycle 
#   then submmits the job to the K computer.
#   Based on the script developed by Shigenori Otsuka
#   Diferences from V3:
#   -Boundary perturbations, met em are perturbed and real is run in 
#    K computer nodes.
#   -Letkf incorporates relaxation to prior inflation and eigen exa
#    matrix computations.
#   -LETKF uses NETCDF IO.
#=======================================================================
#set -x
#-----------------------------------------------------------------------
# Modify below according to your environment
#-----------------------------------------------------------------------
#Get root dir
CDIR=`pwd`

#CONFIGURATION
DOMAINCONF=SINLAKU_20K         #Define a domain
CONFIGURATION=control40m       #Define a experiment configuration
MCONFIGURATION=machine_20k_K   #Define a machine configuration (number of nodes, etc)
LETKFNAMELIST=control          #Define a letkf namelist template

RESTART=0
RESTARTDATE=20080904120000
RESTARTITER=10

MYHOST=`hostname`
PID=$$
MYSCRIPT=${0##*/}
echo ">>>> I'm RUNNING IN $MYHOST and my PID is $PID"


echo ">>>> My config file is $CONFIGURATION         "
echo ">>>> My domain is $DOMAINCONF                 "
echo ">>>> My machine is $MCONFIGURATION            "
echo ">>>> I' am $CDIR/$MYSCRIPT                    "
echo ">>>> My LETKFNAMELIST is $LETKFNAMELIST       "

if [ -e $CDIR/configuration/analysis_conf/${CONFIGURATION}.sh ];then
source $CDIR/configuration/analysis_conf/${CONFIGURATION}.sh
else
echo "CAN'T FIND CONFIGURATION FILE $CDIR/configuration/analysis_conf/${CONFIGURATION}.sh"
exit
fi


if [ -e $CDIR/configuration/machine_conf/${MCONFIGURATION}.sh ];then
source $CDIR/configuration/machine_conf/${MCONFIGURATION}.sh
else
echo "CAN'T FIND MACHINE CONFIGURATION FILE $CDIR/configuration/machine_conf/${MCONFIGURATION}.sh"
exit
fi


source $UTIL

echo '>>>'
echo ">>> COMPUTING THE NUMBER OF REQUIRED NODES"
echo '>>>'

set_total_nodes

echo '>>>'
echo ">>> INITIALIZING WORK DIRECTORY AND OUTPUT DIRECTORY"
echo '>>>'

safe_init_tmpdir $TMPDIR

safe_init_outputdir $OUTPUTDIR

save_configuration $CDIR/$MYSCRIPT

echo '>>>'
echo ">>> COPYING DATA TO WORK DIRECTORY "
echo '>>>'

copy_data


##################################################
# START CYCLE IN TIME
##################################################

echo '>>>'
echo ">>> STARTING WRF-LETKF CYCLE FROM $IDATE TO $EDATE"
echo '>>>'

if [ $RESTART -eq 0 ] ; then
CDATE=$IDATE
ITER=1
else
CDATE=$RESTARTDATE
ITER=$RESTARTITER
fi



while test $CDATE -le $EDATE
do

echo '>>>'
echo ">>> BEGIN COMPUTATION OF $CDATE  ITERATION: $ITER"
echo '>>>'

set_cycle_dates

echo " >>"
echo " >> GENERATING PERTURBATIONS"
echo " >>"

#PERTURB MET_EM FILES USING RANDOM BALANCED OR RANDOM SMOOTHED PERTURBATIONS (run in PPS)
run_script=$TMPDIR/SCRIPTS/perturb_met_em.sh
perturb_met_em $run_script


echo " >>"
echo " >> ENSEMBLE FORECASTS AND LETKF"
echo " >>"

#CREATE OUTPUT DIRECTORIES FOR THE CURRENT CYCLE (YYYYMMDDHHNNSS)
RESULTDIRG=$OUTPUTDIR/gues/$ADATE/
RESULTDIRA=$OUTPUTDIR/anal/$ADATE/

mkdir -p $RESULTDIRG
mkdir -p $RESULTDIRA


# CREATE NAMELIST FOR REAL AND WRF
cp $TMPDIR/WRF/namelist.input.template $TMPDIR/WRF/namelist.input.real
cp $TMPDIR/WRF/namelist.input.template $TMPDIR/WRF/namelist.input.wrf
cp $TMPDIR/WRF/namelist.input.real $TMPDIR/WRF/namelist.input.wrf $RESULTDIRG

edit_namelist_input $TMPDIR/WRF/namelist.input.real $CDATE $BDYDATE $WINDOW_FREC $BOUNDARY_DATA_FREC  #For real
edit_namelist_input $TMPDIR/WRF/namelist.input.wrf  $CDATE $FDATE   $WINDOW_FREC $BOUNDARY_DATA_FREC  #For wrf

# CREATE NAMELIST FOR LETKF
cp $TMPDIR/LETKF/letkf.namelist.template $TMPDIR/LETKF/letkf.namelist
edit_namelist_letkf $TMPDIR/LETKF/letkf.namelist
cp $TMPDIR/LETKF/letkf.namelist $RESULTDIRA

# CREATE AUXILIARY RUNNING SCRIPTS
edit_wrf_post $TMPDIR/SCRIPTS/WRF_POST.sh
edit_wrf_pre  $TMPDIR/SCRIPTS/WRF_PRE.sh
edit_wrf_real $TMPDIR/SCRIPTS/WRF_REAL.sh
edit_wrf_wrf  $TMPDIR/SCRIPTS/WRF_WRF.sh

#GENERATE VCOORD FILES
generate_vcode $TMPDIR/WRF/


#GET THE OBSERVATIONS
get_conventional_observations 

#PREPARE THE SCRIPT
run_script=$TMPDIR/SCRIPTS/run_cycle_script.sh
generate_run_cycle_script_k_background $run_script

cd $TMPDIR
#SUBMITT AND WAIT FOR THE JOB
echo " >>"
echo " >> WAITING FOR ENSEMBLE RUN AND LETKF"
echo " >>"

sub_and_wait $run_script $ITER

echo " >>"
echo " >> DOING POST PROCESSING"
echo " >>"

arw_postproc $ADATE

echo " >>"
echo " >> CHECKING CYCLE"
echo " >>"

check_analysis

CDATE=$ADATE
ITER=`expr $ITER + 1`
RESTART=0    #TURN RESTART FLAG TO 0 IN CASE IT WAS GREATHER THAN 0.

done	### MAIN LOOP ###

echo "NORMAL END"
