# -*- coding: utf-8 -*-

#Grafica el histograma de cada variable dentro de un determinado dominio para el 
#punto con el maximo kld. E indica la posicion de dicho punto.
#Esto sirve para tener una idea visual de que significa un KLD grande para 
#diferentes variables y casos.

"""
Created on Tue Nov  1 18:45:15 2016

@author:
"""

import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import binary_io as bio
import histogram_tools as ht
import bred_vector_functions as bvf
import os

basedir='/home/jruiz/share/EXPERIMENTS/experiments_large_ensemble/data/'

expname = '/OsakaPAR_1km_control1000m_smallrandompert_noda/'

plotbasedir=basedir + expname + '/plots/'

undef_in=1.0e20

nbins=30
thresholdmin=0.005

undef_out=np.nan

filetype='analgp'   

buf_zone=20
buf_zone_z=4

#The following will be used to extract a particlar variable from the original data.
#This variables should be especified according to the data that we have in the binary files.

ctl_vars='U','V','W','T','QV','QHYD'  #Complete list of variables in ctl file.
ctl_inirecord=[0,12,24,36,48,60]        #Starting record for each variable. From 0 to N
ctl_endrecord=[11,23,35,47,59,71]       #End record for each variable. From 0 to N.

#Which variables and levels are we going to plot?

plotlevels=np.array([3,7,9])            #Which levels will be plotted (this levels are equivalent to the BV plots)
plotvars='U','V','W','T','QV','QHYD'    #Which variables will be plotted.

#Create the plotbasedir
if not os.path.exists(plotbasedir):
   os.mkdir(plotbasedir)

#Defini initial and end times using datetime module.
itime = dt.datetime(2013,7,13,5,25,00)  #Initial time.
etime = dt.datetime(2013,7,13,5,39,00)  #End time.

#Define the delta.
delta=dt.timedelta(seconds=60)

nx=180
ny=180
nz=np.max(ctl_endrecord) + 1  #Total number of records in binary file.
nlev=12                       #Number of vertical levels for 3D variables.
ntimes=1 + np.around((etime-itime).seconds / delta.seconds)  #Total number of times.


#Define regions

my_hist=dict()

ens_mean=dict()

ens_std=dict()

ens_skew=dict()

ens_kurt=dict()

ctime=itime 

#Get lat lon.

lat=bio.read_data_direct(basedir + expname + '/latlon/lat.grd',nx,ny,1,'>f4')[:,:,0]
lon=bio.read_data_direct(basedir + expname + '/latlon/lon.grd',nx,ny,1,'>f4')[:,:,0]

int_liquid=np.zeros([nx,ny,nlev])

it=0

while ( ctime <= etime ):

 print( ctime )

 print ( 'Reading the histogram ')

 hist_file=basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/histogram.grd'
 max_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/maxvar.grd'
 min_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/minvar.grd'

 hist=ht.read_histogram(hist_file,max_file,min_file,nx,ny,nbins,ctl_vars,ctl_inirecord,ctl_endrecord,dtypeinfloat='>f4',dtypeinint='>i2',undef_in=undef_in,undef_out=undef_out)

 kld_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/kldistance.grd'

 kld=bio.read_data_scale_2(kld_file,nx,ny,nz,ctl_vars,ctl_inirecord,ctl_endrecord,dtypein='f4',undef_in=undef_in,undef_out=undef_out)

# hist_properties=analyze_histogram_fun( my_hist , thresholdmin )

 mean_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/moment0001.grd'

 ens_mean=bio.read_data_scale_2(mean_file,nx,ny,nz,ctl_vars,ctl_inirecord,ctl_endrecord,dtypein='f4',undef_in=undef_in,undef_out=undef_out)

 std_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/moment0002.grd'

 ens_std=bio.read_data_scale_2(std_file,nx,ny,nz,ctl_vars,ctl_inirecord,ctl_endrecord,dtypein='f4',undef_in=undef_in,undef_out=undef_out)

 skew_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/moment0003.grd'

 ens_skew=bio.read_data_scale_2(skew_file,nx,ny,nz,ctl_vars,ctl_inirecord,ctl_endrecord,dtypein='f4',undef_in=undef_in,undef_out=undef_out)

 kurt_file =basedir + expname + ctime.strftime("%Y%m%d%H%M%S") + '/'+ filetype + '/' + '/moment0004.grd'

 ens_kurt=bio.read_data_scale_2(kurt_file,nx,ny,nz,ctl_vars,ctl_inirecord,ctl_endrecord,dtypein='f4',undef_in=undef_in,undef_out=undef_out)


 #Compute total integrated liquid (we will use this to identify areas associated with clouds and convection)
 tmp_int_liquid = np.nansum(ens_mean['QHYD'],2)

 for ilev in range(0,nlev)   :          #Create a fake 3D array for the vertically integrated liquid
                                        #This is because the plotting function expects a 3D array as input.
  int_liquid[:,:,ilev]=tmp_int_liquid

 for key in hist :

  my_kld=kld[key][buf_zone:-buf_zone,buf_zone:-buf_zone,:-buf_zone_z]

  my_std=ens_std[key]
 
  my_skew=ens_skew[key]/np.power(my_std,3/2)

  my_kurt=ens_kurt[key]/np.power(my_std,2) -3

  my_hist=hist[key]

  #Busco el maximo del KLD
  max_loc=np.nanargmax( my_kld )

  [tmpnx , tmpny , tmpnz ]=np.shape( my_kld )

  [xmax,ymax,zmax]=np.unravel_index( max_loc,(tmpnx,tmpny,tmpnz) ) 

  max_range=my_hist['maxval'][xmax,ymax,zmax]
  min_range=my_hist['minval'][xmax,ymax,zmax]

  my_delta=(max_range-min_range)/nbins
   
  my_range=min_range + my_delta / 2 + my_delta *  np.arange(0,nbins,1)

  my_bars=my_hist['hist'][xmax,ymax,zmax,:] / np.sum( my_hist['hist'][xmax,ymax,zmax,:] )

  smooth_range=2

  my_bars_s=np.zeros(np.shape(my_bars))

  for ii in range(0,my_bars.size) :
    mini=ii-smooth_range
    maxi=ii+smooth_range
    if( mini < 0 ) : 
     mini=0
    if( maxi > np.size(my_bars)-1 ) :
     maxi=np.size(my_bars)-1
    my_bars_s[ii]=np.mean( my_bars[mini:maxi])

  my_mean=ens_mean[key][xmax,ymax,zmax]
  my_sigma=ens_std[key][xmax,ymax,zmax]

  my_gauss_fit=my_delta*(1/(np.sqrt(2*np.pi*my_sigma)))*np.exp( -np.power( my_range-my_mean,2)/(2*my_sigma))
 
  my_label= key + ' KLD=' +  my_kld[xmax,ymax,zmax].astype('U4')
 
  the_bars=plt.bar( my_range , my_bars_s , width = my_delta ,color='r',label=my_label ) 
  the_lines=plt.plot( my_range , my_gauss_fit , 'k--',linewidth=4) 
 
  plt.legend(handles=[the_bars])
 
  #plt.show()

  #Plot the increments.
  print( 'Generationg the following figure : ' + 'Figure_histogram_maxkld_' + key + '_' + ctime.strftime("%Y%m%d%H%M%S") + 'png' )
  plt.savefig( basedir + expname  + '/plots/Figure_histogram_maxkld_' + key + '_' + ctime.strftime("%Y%m%d%H%M%S") + 'png' )

  plt.close()



 ctime = ctime + delta
 
 it = it + 1

print ( "Finish time loop" )

            


